
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/blogs/plot_emg_pose.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_blogs_plot_emg_pose.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_blogs_plot_emg_pose.py:


Predict hand pose from EMG signals using ML
===========================================

Meta has been doing a lot of work trying to figure out how to replace
keyboards and controllers with hand gestures (when the user is wearing
a wrist band). 

Back when I was a young hopper (AKA a PhD student), I interviewed with
their Reality Labs team. The technical interview at the time was to
take a dataset of EMG signals from a participant, and to predict the
hand pose of the participant (Also, nearly pure python.. I.e. no
scikit-learn, no pytorch. Woof).

Well now they've open-sourced the EMG dataset from that project, so
I am going to save some soul out there some time and show how them
how to do it.

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: Python

    from collections.abc import KeysView
    from dataclasses import dataclass
    from pathlib import Path
    from typing import Any, ClassVar

    import h5py
    import matplotlib.pyplot as plt
    import mne
    import numpy as np
    import pooch
    import seaborn as sns
    from sklearn.cluster import KMeans
    from sklearn.decomposition import PCA









.. GENERATED FROM PYTHON SOURCE LINES 38-41

Create a helper function to read the data
------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 43-153

.. code-block:: Python

    @dataclass
    class Emg2PoseSessionData:
        """A read-only interface to a single emg2pose session file stored in
        HDF5 format.

        ``self.timeseries`` is a `h5py.Dataset` instance with a compound data type
        as in a numpy structured array containing three fields - EMG data from the
        left and right wrists, and their corresponding timestamps.
        The sampling rate of EMG is 2kHz, each EMG device has 16 electrode
        channels, and the signal has been high-pass filtered. Therefore, the fields
        corresponding to left and right EMG are 2D arrays of shape ``(T, 16)`` each
        and ``timestamps`` is a 1D array of length ``T``.

        NOTE: Only the metadata and ground-truth are loaded into memory while the
        EMG data is accesssed directly from disk. When wrapping this interface
        within a PyTorch Dataset, use multiple dataloading workers to mask the
        disk seek and read latencies."""

        HDF5_GROUP: ClassVar[str] = "emg2pose"
        # timeseries keys
        TIMESERIES: ClassVar[str] = "timeseries"
        EMG: ClassVar[str] = "emg"
        JOINT_ANGLES: ClassVar[str] = "joint_angles"
        TIMESTAMPS: ClassVar[str] = "time"
        # metadata keys
        SESSION_NAME: ClassVar[str] = "session"
        SIDE: ClassVar[str] = "side"
        STAGE: ClassVar[str] = "stage"
        START_TIME: ClassVar[str] = "start"
        END_TIME: ClassVar[str] = "end"
        NUM_CHANNELS: ClassVar[str] = "num_channels"
        DATASET_NAME: ClassVar[str] = "dataset"
        USER: ClassVar[str] = "user"
        SAMPLE_RATE: ClassVar[str] = "sample_rate"

        hdf5_path: Path

        def __post_init__(self) -> None:
            self._file = h5py.File(self.hdf5_path, "r")
            emg2pose_group: h5py.Group = self._file[self.HDF5_GROUP]

            # ``timeseries`` is a HDF5 compound Dataset
            self.timeseries: h5py.Dataset = emg2pose_group[self.TIMESERIES]
            assert self.timeseries.dtype.fields is not None
            assert self.EMG in self.timeseries.dtype.fields
            assert self.JOINT_ANGLES in self.timeseries.dtype.fields
            assert self.TIMESTAMPS in self.timeseries.dtype.fields

            # Load the metadata entirely into memory as it's rather small
            self.metadata: dict[str, Any] = {}
            for key, val in emg2pose_group.attrs.items():
                self.metadata[key] = val

        def __enter__(self):
            return self

        def __exit__(self, exc_type, exc_value, traceback) -> None:
            self._file.close()

        def __len__(self) -> int:
            return len(self.timeseries)

        def __getitem__(self, key: slice) -> np.ndarray:
            return self.timeseries[key]

        def slice(self, start_t: float = -np.inf, end_t: float = np.inf) -> np.ndarray:
            """Load and return a contiguous slice of the timeseries windowed
            by the provided start and end timestamps.

            Args:
                start_t (float): The start time of the window to grab
                    (in absolute unix time). Defaults to selecting from the
                    beginning of the session. (default: ``-np.inf``).
                end_t (float): The end time of the window to grab
                    (in absolute unix time). Defaults to selecting until the
                    end of the session. (default: ``np.inf``)
            """
            start_idx, end_idx = self.timestamps.searchsorted([start_t, end_t])
            return self[start_idx:end_idx]

        @property
        def fields(self) -> KeysView[str]:
            """The names of the fields in ``timeseries``."""
            fields: KeysView[str] = self.timeseries.dtype.fields.keys()
            return fields

        @property
        def timestamps(self) -> np.ndarray:
            """EMG timestamps.

            NOTE: This reads the entire sequence of timesetamps from the underlying
            HDF5 file and therefore incurs disk latency. Avoid this in the critical
            path."""
            emg_timestamps = self.timeseries[self.TIMESTAMPS]
            assert (np.diff(emg_timestamps) >= 0).all(), "Not monotonic"
            return emg_timestamps

        @property
        def session_name(self) -> str:
            """Unique name of the session."""
            return self.metadata[self.SESSION_NAME]

        @property
        def user(self) -> str:
            """Unique ID of the user this session corresponds to."""
            return self.metadata[self.USER]

        def __str__(self) -> str:
            return f"{self.__class__.__name__} {self.session_name} ({len(self)} samples)"








.. GENERATED FROM PYTHON SOURCE LINES 154-157

Download the dataset
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-178

.. code-block:: Python

    data_dir = Path.home() / "emg_data"
    emg_dir = data_dir / "emg2pose_dataset_mini"
    want_fpath = "emg2pose_dataset_mini/2022-12-06-1670313600-e3096-cv-emg-pose-train@2-recording-1_left.hdf5"

    unpack = pooch.Untar(extract_dir=data_dir, # Relative to the path where the zip file is downloaded
                         members=[want_fpath]
                         )
    emg_fpaths = pooch.retrieve(
        url="https://fb-ctrl-oss.s3.amazonaws.com/emg2pose/emg2pose_dataset_mini.tar",
        known_hash="sha256:d7400e98508ccbb2139c2d78e552867b23501f637456546fd6680f3fe7fec50d",
        progressbar=True,
        path=data_dir,
        processor=unpack,
    )
    emg_fname = Path(emg_fpaths[0])
    emg_dir = emg_fname.parent
    # Delete the large tar file
    # list(emg_dir.glob("*.tar"))[0].unlink()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                               | 0.00/647M [00:00<?, ?B/s]      1%|▍                                     | 6.61M/647M [00:00<00:11, 56.4MB/s]      2%|▋                                     | 12.2M/647M [00:00<00:16, 38.6MB/s]      3%|▉                                     | 16.4M/647M [00:00<00:23, 26.4MB/s]      3%|█▏                                    | 19.4M/647M [00:00<00:25, 24.4MB/s]      4%|█▎                                    | 23.4M/647M [00:00<00:28, 22.2MB/s]      4%|█▌                                    | 25.7M/647M [00:01<00:31, 19.9MB/s]      5%|█▊                                    | 31.8M/647M [00:01<00:29, 21.0MB/s]      5%|█▉                                    | 33.9M/647M [00:01<00:32, 19.1MB/s]      6%|██▎                                   | 40.2M/647M [00:01<00:24, 24.4MB/s]      7%|██▌                                   | 43.0M/647M [00:01<00:23, 25.2MB/s]      8%|██▉                                   | 50.3M/647M [00:01<00:20, 28.8MB/s]      9%|███▎                                  | 56.9M/647M [00:02<00:23, 25.6MB/s]      9%|███▍                                  | 59.6M/647M [00:02<00:24, 24.2MB/s]     10%|███▊                                  | 65.3M/647M [00:02<00:21, 27.2MB/s]     11%|███▉                                  | 68.1M/647M [00:02<00:23, 24.9MB/s]     11%|████▎                                 | 74.1M/647M [00:03<00:29, 19.5MB/s]     12%|████▍                                 | 76.3M/647M [00:03<00:30, 18.9MB/s]     13%|████▊                                 | 82.1M/647M [00:03<00:23, 23.9MB/s]     13%|████▉                                 | 84.8M/647M [00:03<00:25, 22.1MB/s]     14%|█████▎                                | 90.5M/647M [00:03<00:23, 23.9MB/s]     14%|█████▍                                | 93.0M/647M [00:03<00:25, 21.4MB/s]     15%|█████▊                                | 98.9M/647M [00:04<00:24, 22.6MB/s]     16%|██████                                 | 101M/647M [00:04<00:25, 21.3MB/s]     17%|██████▍                                | 107M/647M [00:04<00:36, 14.8MB/s]     17%|██████▌                                | 109M/647M [00:05<00:36, 14.9MB/s]     18%|██████▉                                | 116M/647M [00:05<00:23, 23.0MB/s]     18%|███████▏                               | 119M/647M [00:05<00:22, 23.6MB/s]     19%|███████▍                               | 124M/647M [00:05<00:24, 21.1MB/s]     20%|███████▋                               | 127M/647M [00:05<00:25, 20.8MB/s]     21%|████████                               | 134M/647M [00:05<00:16, 30.2MB/s]     21%|████████▎                              | 138M/647M [00:05<00:17, 29.2MB/s]     22%|████████▌                              | 141M/647M [00:06<00:17, 29.3MB/s]     22%|████████▋                              | 145M/647M [00:06<00:19, 26.4MB/s]     23%|█████████                              | 151M/647M [00:06<00:17, 28.3MB/s]     25%|█████████▌                             | 159M/647M [00:06<00:15, 30.9MB/s]     26%|██████████                             | 166M/647M [00:06<00:12, 38.0MB/s]     26%|██████████▎                            | 171M/647M [00:06<00:16, 29.6MB/s]     27%|██████████▌                            | 176M/647M [00:07<00:16, 28.7MB/s]     29%|███████████                            | 185M/647M [00:07<00:12, 38.1MB/s]     30%|███████████▌                           | 191M/647M [00:07<00:10, 42.8MB/s]     30%|███████████▊                           | 196M/647M [00:07<00:12, 36.4MB/s]     31%|████████████                           | 200M/647M [00:07<00:13, 32.7MB/s]     32%|████████████▎                          | 204M/647M [00:07<00:14, 29.7MB/s]     32%|████████████▋                          | 210M/647M [00:08<00:12, 35.3MB/s]     33%|█████████████                          | 216M/647M [00:08<00:10, 39.3MB/s]     34%|█████████████▎                         | 221M/647M [00:08<00:11, 37.0MB/s]     35%|█████████████▋                         | 226M/647M [00:08<00:12, 33.4MB/s]     36%|██████████████                         | 233M/647M [00:08<00:11, 36.2MB/s]     37%|██████████████▎                        | 237M/647M [00:08<00:11, 34.9MB/s]     37%|██████████████▌                        | 242M/647M [00:09<00:14, 27.8MB/s]     38%|██████████████▊                        | 245M/647M [00:09<00:17, 22.7MB/s]     39%|███████████████▏                       | 252M/647M [00:09<00:14, 27.0MB/s]     40%|███████████████▌                       | 259M/647M [00:09<00:15, 25.9MB/s]     40%|███████████████▊                       | 261M/647M [00:09<00:15, 24.4MB/s]     41%|████████████████                       | 267M/647M [00:10<00:14, 26.4MB/s]     42%|████████████████▏                      | 269M/647M [00:10<00:15, 25.1MB/s]     42%|████████████████▌                      | 275M/647M [00:10<00:13, 27.3MB/s]     43%|████████████████▋                      | 278M/647M [00:10<00:14, 24.9MB/s]     44%|█████████████████                      | 283M/647M [00:10<00:11, 31.3MB/s]     44%|█████████████████▎                     | 287M/647M [00:10<00:12, 29.7MB/s]     45%|█████████████████▌                     | 292M/647M [00:10<00:10, 33.8MB/s]     46%|█████████████████▊                     | 295M/647M [00:11<00:12, 29.2MB/s]     46%|██████████████████                     | 300M/647M [00:11<00:16, 21.2MB/s]     47%|██████████████████▏                    | 303M/647M [00:11<00:15, 21.8MB/s]     48%|██████████████████▌                    | 309M/647M [00:11<00:12, 28.1MB/s]     48%|██████████████████▊                    | 312M/647M [00:11<00:12, 25.9MB/s]     49%|███████████████████▏                   | 319M/647M [00:11<00:10, 31.8MB/s]     50%|███████████████████▌                   | 325M/647M [00:12<00:09, 33.6MB/s]     51%|███████████████████▊                   | 329M/647M [00:12<00:10, 30.7MB/s]     52%|████████████████████▏                  | 336M/647M [00:12<00:09, 32.0MB/s]     53%|████████████████████▌                  | 342M/647M [00:12<00:08, 35.8MB/s]     53%|████████████████████▊                  | 346M/647M [00:12<00:08, 34.1MB/s]     54%|█████████████████████▏                 | 351M/647M [00:12<00:08, 33.8MB/s]     55%|█████████████████████▎                 | 354M/647M [00:12<00:09, 32.1MB/s]     55%|█████████████████████▌                 | 358M/647M [00:13<00:10, 26.5MB/s]     56%|█████████████████████▋                 | 360M/647M [00:13<00:12, 23.0MB/s]     56%|█████████████████████▊                 | 363M/647M [00:13<00:14, 19.4MB/s]     57%|██████████████████████▏                | 369M/647M [00:13<00:11, 23.4MB/s]     58%|██████████████████████▋                | 376M/647M [00:13<00:09, 27.3MB/s]     58%|██████████████████████▊                | 378M/647M [00:14<00:11, 24.4MB/s]     60%|███████████████████████▎               | 386M/647M [00:14<00:08, 29.7MB/s]     61%|███████████████████████▋               | 392M/647M [00:14<00:07, 36.3MB/s]     61%|███████████████████████▉               | 396M/647M [00:14<00:07, 34.1MB/s]     62%|████████████████████████▏              | 401M/647M [00:14<00:07, 32.8MB/s]     62%|████████████████████████▎              | 404M/647M [00:14<00:08, 29.4MB/s]     63%|████████████████████████▋              | 409M/647M [00:15<00:09, 26.2MB/s]     64%|████████████████████████▊              | 412M/647M [00:15<00:11, 21.0MB/s]     65%|█████████████████████████▏             | 418M/647M [00:15<00:09, 25.3MB/s]     65%|█████████████████████████▎             | 420M/647M [00:15<00:09, 24.0MB/s]     66%|█████████████████████████▋             | 426M/647M [00:15<00:07, 28.7MB/s]     66%|█████████████████████████▊             | 429M/647M [00:15<00:09, 23.3MB/s]     67%|██████████████████████████▏            | 435M/647M [00:16<00:06, 30.9MB/s]     68%|██████████████████████████▍            | 439M/647M [00:16<00:07, 26.5MB/s]     69%|██████████████████████████▋            | 443M/647M [00:16<00:06, 30.2MB/s]     69%|██████████████████████████▉            | 447M/647M [00:16<00:06, 29.0MB/s]     70%|███████████████████████████▎           | 453M/647M [00:16<00:05, 35.6MB/s]     71%|███████████████████████████▌           | 457M/647M [00:16<00:06, 30.7MB/s]     71%|███████████████████████████▋           | 460M/647M [00:17<00:09, 20.2MB/s]     72%|███████████████████████████▉           | 463M/647M [00:17<00:09, 19.4MB/s]     72%|████████████████████████████▏          | 468M/647M [00:17<00:09, 19.8MB/s]     73%|████████████████████████████▎          | 471M/647M [00:17<00:09, 18.7MB/s]     74%|████████████████████████████▋          | 476M/647M [00:18<00:09, 17.5MB/s]     74%|████████████████████████████▊          | 478M/647M [00:18<00:10, 16.4MB/s]     75%|█████████████████████████████▏         | 485M/647M [00:18<00:06, 24.1MB/s]     75%|█████████████████████████████▍         | 488M/647M [00:18<00:06, 23.3MB/s]     76%|█████████████████████████████▋         | 493M/647M [00:18<00:05, 27.5MB/s]     77%|█████████████████████████████▉         | 496M/647M [00:18<00:05, 26.4MB/s]     77%|██████████████████████████████▏        | 502M/647M [00:18<00:05, 27.1MB/s]     78%|██████████████████████████████▍        | 504M/647M [00:19<00:05, 26.6MB/s]     79%|██████████████████████████████▋        | 510M/647M [00:19<00:05, 23.7MB/s]     79%|██████████████████████████████▉        | 512M/647M [00:19<00:06, 21.5MB/s]     80%|███████████████████████████████▏       | 518M/647M [00:19<00:04, 25.9MB/s]     81%|███████████████████████████████▍       | 521M/647M [00:19<00:05, 24.7MB/s]     82%|███████████████████████████████▊       | 528M/647M [00:19<00:03, 34.4MB/s]     82%|████████████████████████████████       | 532M/647M [00:20<00:03, 28.9MB/s]     83%|████████████████████████████████▎      | 536M/647M [00:20<00:03, 31.2MB/s]     83%|████████████████████████████████▌      | 539M/647M [00:20<00:03, 30.7MB/s]     84%|████████████████████████████████▊      | 545M/647M [00:20<00:03, 29.7MB/s]     85%|█████████████████████████████████▎     | 552M/647M [00:20<00:03, 27.8MB/s]     86%|█████████████████████████████████▍     | 555M/647M [00:20<00:03, 25.9MB/s]     87%|█████████████████████████████████▊     | 560M/647M [00:21<00:03, 28.6MB/s]     87%|█████████████████████████████████▉     | 563M/647M [00:21<00:03, 27.0MB/s]     88%|██████████████████████████████████▎    | 569M/647M [00:21<00:02, 26.2MB/s]     88%|██████████████████████████████████▍    | 571M/647M [00:21<00:03, 23.1MB/s]     89%|██████████████████████████████████▉    | 579M/647M [00:21<00:02, 30.7MB/s]     90%|███████████████████████████████████▏   | 584M/647M [00:21<00:01, 34.3MB/s]     91%|███████████████████████████████████▍   | 587M/647M [00:21<00:01, 30.6MB/s]     92%|███████████████████████████████████▊   | 594M/647M [00:22<00:01, 34.1MB/s]     92%|███████████████████████████████████▉   | 597M/647M [00:22<00:01, 30.4MB/s]     93%|████████████████████████████████████▍  | 604M/647M [00:22<00:01, 35.5MB/s]     95%|████████████████████████████████████▉  | 612M/647M [00:22<00:01, 34.0MB/s]     96%|█████████████████████████████████████▎ | 619M/647M [00:22<00:00, 32.0MB/s]     96%|█████████████████████████████████████▍ | 622M/647M [00:23<00:00, 28.0MB/s]     97%|█████████████████████████████████████▊ | 628M/647M [00:23<00:00, 30.8MB/s]     97%|██████████████████████████████████████ | 631M/647M [00:23<00:00, 27.9MB/s]     98%|██████████████████████████████████████▍| 637M/647M [00:23<00:00, 34.9MB/s]     99%|██████████████████████████████████████▋| 641M/647M [00:23<00:00, 34.3MB/s]      0%|                                               | 0.00/647M [00:00<?, ?B/s]    100%|███████████████████████████████████████| 647M/647M [00:00<00:00, 1.93TB/s]




.. GENERATED FROM PYTHON SOURCE LINES 179-182

Load the data
----------------


.. GENERATED FROM PYTHON SOURCE LINES 184-186

.. code-block:: Python

    data = Emg2PoseSessionData(hdf5_path=emg_fname)








.. GENERATED FROM PYTHON SOURCE LINES 187-190

Visualize the data
------------------
We'll let MNE-Python do the heavy lifting for us here.

.. GENERATED FROM PYTHON SOURCE LINES 192-202

.. code-block:: Python

    ch_names = [f"EMG{ii:02}" for ii, _ in enumerate(data["emg"].T, 1)]
    ch_types = ["emg"] * len(ch_names)
    sfreq = data.metadata[Emg2PoseSessionData.SAMPLE_RATE]
    info = mne.create_info(ch_names=ch_names, ch_types=ch_types, sfreq=sfreq)
    # MNE expects data in the shape (n_channels, n_times). So we need to transpose the data
    raw = mne.io.RawArray(data["emg"].T, info)
    # MNE expects the EMG data to be in Volts, so we need to scale it from mV to V
    raw.apply_function(lambda x: x * 1e-6, picks="emg")
    raw.plot(start=20, duration=20)




.. image-sg:: /auto_examples/blogs/images/sphx_glr_plot_emg_pose_001.png
   :alt: plot emg pose
   :srcset: /auto_examples/blogs/images/sphx_glr_plot_emg_pose_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Creating RawArray with float64 data, n_channels=16, n_times=142674
        Range : 0 ... 142673 =      0.000 ...    71.337 secs
    Ready.
    Using matplotlib as 2D backend.

    <MNEBrowseFigure size 800x800 with 4 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 203-209

Use PCA and KMeans to cluster the data
--------------------------------------

We'll use PCA to reduce the data dimenstionality to 3D
and then use KMeans to cluster the data.


.. GENERATED FROM PYTHON SOURCE LINES 211-216

.. code-block:: Python

    n_components = 3
    pca = PCA(n_components=n_components)
    data_pca = pca.fit_transform(data["emg"])
    clusters = KMeans(n_clusters=5).fit_predict(data_pca)








.. GENERATED FROM PYTHON SOURCE LINES 217-220

Visualize the clusters
----------------------


.. GENERATED FROM PYTHON SOURCE LINES 222-232

.. code-block:: Python

    sns.set_theme(style="darkgrid")
    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
    ax.scatter(data_pca[:, 0], data_pca[:, 1], data_pca[:, 2], c=clusters)
    ax.set_xlabel("PC1")
    ax.set_ylabel("PC2")
    ax.set_zlabel("PC3")
    ax.set_title("PCA of EMG data with KMeans clustering")
    plt.show()





.. image-sg:: /auto_examples/blogs/images/sphx_glr_plot_emg_pose_002.png
   :alt: PCA of EMG data with KMeans clustering
   :srcset: /auto_examples/blogs/images/sphx_glr_plot_emg_pose_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 30.840 seconds)


.. _sphx_glr_download_auto_examples_blogs_plot_emg_pose.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_emg_pose.ipynb <plot_emg_pose.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_emg_pose.py <plot_emg_pose.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_emg_pose.zip <plot_emg_pose.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
